{
	"name": "alk",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [
                {
				    "name": "keyword.control.alk",
				    "match": "\\b(if|else|while|do|for|foreach|in|from|out|havoc|choose|uniform|repeat|return|success|until|failure|assert|assume|symbolic|invariant|forall|exists|continue|break)\\b"
			    },
                {
                    "name": "keyword.struct.alk",
				    "match": "\\b(emptySet|emptyList|emptyStructure|array|set)\\b"
                },
                {
                    "name": "keyword.includes.alk",
				    "match": "\\b(modifies|uses|includes)\\b"
                },
                {
                    "name": "keyword.math.alk",
				    "match": "\\b(xor|abs|acos|asin|atan|cos|log|pi|pow|sin|sqrt|tan|len)\\b"
                },
                {
                    "name": "keyword.builtin.alk",
				    "match": "\\b(at|belongsTo|delete|empty|end|first|float|insert|int|print|popBack|popFront|pushBack|pushFront|remove|removeAllEqTo|removeAt|singletonSet|size|split|topBack|topFront|update)\\b"
                },
                {
                    "name": "keyword.prob.alk",
				    "match": "\\b(uniformNat|flip|uniformFloat|uniformPerm|Count|s.t.)\\b"
                },
                {
                    "name": "comment",
                    "match": "(\/\/.*|\/\\*(.|\n)*?\\*\/)"
                }
            ]
		},
		"strings": {
			"name": "string.quoted.double.alk",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.alk",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.alk"
}